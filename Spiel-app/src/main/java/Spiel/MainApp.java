/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package Spiel;

import java.util.HashMap;

import Spiel.controller.GestorbenDialogController;
import Spiel.controller.GewonnenDialogController;
import Spiel.controller.MainAppController;
import Spiel.controller.SchwierigkeitsgradController;
import Spiel.controller.SpielanleitungController;
import Spiel.model.Chest;
import Spiel.model.Hebel;
import Spiel.model.Opponent;
import Spiel.model.Player;
import Spiel.model.Room;
import Spiel.model.items.ItemStock;
import javafx.application.Application;
import javafx.fxml.FXMLLoader;
import javafx.scene.Scene;
import javafx.scene.control.Alert;
import javafx.scene.control.Alert.AlertType;
import javafx.scene.image.Image;
import javafx.scene.layout.AnchorPane;
import javafx.scene.layout.VBox;
import javafx.stage.Stage;

public class MainApp extends Application {

	private Stage primaryStage;
	private AnchorPane rootLayout;
	private Scene scene;

	private String schwierigkeitsgrad = "";

	/**
	 * Spieler der das Spiel spielt.
	 */
	private Player player;

	private Room startraum, gegnerraum1, gegnerraum2, gegnerraum3, gegnerraum4, gegnerraum5, gegnerraum6, schatzraum1,
			schatzraum2, schatzraum3, schatzraum4, schatzraum5, schatzraum6, hebelraum1, hebelraum2, hebelraum3, halle,
			endgegner;

	private HashMap<Integer, Image> roomImages = new HashMap<Integer, Image>();

	private HashMap<Integer, Image> gegnerGifs = new HashMap<Integer, Image>();

	private HashMap<Integer, Image> mapImages = new HashMap<Integer, Image>();

	private HashMap<String, Image> logos = new HashMap<String, Image>();

	public MainApp() {

		this.gegnerGifsAnlegen();
		this.roomBilderAnlegen();
		this.mapBilderAnlegen();
		this.itemLogosAnlegen();

	}

	@Override
	public void start(Stage primaryStage) {

		this.primaryStage = primaryStage;
		this.primaryStage.setTitle("Zuul");
		this.primaryStage.setResizable(false);

		initRootLayout();
	}

	public void initRootLayout() {

		player = new Player();
		createRooms();

		try {
			FXMLLoader loader = new FXMLLoader();
			loader.setLocation(MainApp.class.getResource("../fxml_Dateien/Main.fxml"));
			this.rootLayout = (AnchorPane) loader.load();

			MainAppController controller = loader.getController();
			controller.setMainApp(this);
			controller.setPlayer(player);
			controller.startwerteSetzen();

			this.scene = new Scene(rootLayout);
			primaryStage.setScene(scene);
			primaryStage.show();

			System.out.println("Rootlayout erfolgreich!");

		} catch (Exception e) {

			fehlerBeimLadenVonFxmlDateiAnzeigen("Rootlayout: " + e.getMessage());

		}

	}

	public void initGestorbenDialog() {
		try {
			FXMLLoader loader = new FXMLLoader();
			loader.setLocation(MainApp.class.getResource("../fxml_Dateien/GestorbenDialog.fxml"));
			VBox vbox = (VBox) loader.load();

			GestorbenDialogController controller = loader.getController();
			controller.setMainApp(this);
			controller.setPlayer(player);
			controller.spielStatistikenAnzeigenVerloren();

			Scene scene = new Scene(vbox);
			primaryStage.setScene(scene);
			primaryStage.show();

		} catch (Exception e) {

			fehlerBeimLadenVonFxmlDateiAnzeigen("Gestorbenlayout: " + e.getMessage());

		}

	}

	public void initGewonnenDialog() {
		try {
			FXMLLoader loader = new FXMLLoader();
			loader.setLocation(MainApp.class.getResource("../fxml_Dateien/GewonnenDialog.fxml"));
			VBox vbox = (VBox) loader.load();

			GewonnenDialogController controller = loader.getController();
			controller.setMainApp(this);
			controller.setPlayer(player);
			controller.spielStatistikenAnzeigenGewonnen();

			Scene scene = new Scene(vbox);
			primaryStage.setScene(scene);
			primaryStage.show();

		} catch (Exception e) {

			fehlerBeimLadenVonFxmlDateiAnzeigen("Gewonnenlayout: " + e.getMessage());

		}

	}

	public void initSpielanleitung() {
		try {
			FXMLLoader loader = new FXMLLoader();
			loader.setLocation(MainApp.class.getResource("../fxml_Dateien/Spielanleitung.fxml"));
			VBox vbox = (VBox) loader.load();

			SpielanleitungController controller = loader.getController();
			controller.setMainApp(this);

			Scene scene = new Scene(vbox);
			primaryStage.setScene(scene);
			primaryStage.show();

		} catch (Exception e) {

			fehlerBeimLadenVonFxmlDateiAnzeigen("Spielanleitunglayout: " + e.getMessage());

		}

	}

	public void initSchwierigkeitsgradWählen() {
		try {
			FXMLLoader loader = new FXMLLoader();
			loader.setLocation(MainApp.class.getResource("../fxml_Dateien/Schwierigkeitsgrad.fxml"));
			VBox vbox = (VBox) loader.load();

			SchwierigkeitsgradController controller = loader.getController();
			controller.setMainApp(this);
			controller.schwierigkeitsgradSetzen();
			Scene scene = new Scene(vbox);
			primaryStage.setScene(scene);
			primaryStage.show();

		} catch (Exception e) {

			fehlerBeimLadenVonFxmlDateiAnzeigen("Schwierigkeitsgradlayout: " + e.getMessage());

		}

	}

	private void createRooms() {

		// Räume erzeugen:
		startraum = new Room("auf einer Wiese vor einer finsteren Höhle", 1);
		player.setCurrentRoom(startraum);
		player.setStartraumtoRoomHistory(startraum);
		// startraum.addItem(new ItemSchneeball(10));
		player.addItem(new ItemStock(1));

		gegnerraum1 = new Room("in einem düsteren Raum, du hörst etwas in der Dunkelheit", 2);

		gegnerraum2 = new Room("in einem düsteren Raum, du hörst etwas in der Dunkelheit", 6);
		gegnerraum3 = new Room("in einem düsteren Raum, du hörst etwas in der Dunkelheit", 7);
		gegnerraum4 = new Room("in einem düsteren Raum, du hörst etwas in der Dunkelheit", 8);
		gegnerraum5 = new Room("in einem düsteren Raum, du hörst etwas in der Dunkelheit", 12);
		gegnerraum6 = new Room("in einem düsteren Raum, du hörst etwas in der Dunkelheit", 13);

		schatzraum1 = new Room("in einem spärlich beleuchtetem Raum... siehst etwas in der Dunkelheit glitzern", 3);
		schatzraum2 = new Room("in einem spärlich beleuchtetem Raum... siehst etwas in der Dunkelheit glitzern", 4);
		schatzraum3 = new Room("in einem spärlich beleuchtetem Raum... siehst etwas in der Dunkelheit glitzern", 5);
		schatzraum4 = new Room("in einem spärlich beleuchtetem Raum... siehst etwas in der Dunkelheit glitzern", 9);
		schatzraum5 = new Room("in einem spärlich beleuchtetem Raum... siehst etwas in der Dunkelheit glitzern", 10);
		schatzraum6 = new Room("in einem spärlich beleuchtetem Raum... siehst etwas in der Dunkelheit glitzern", 11);

		hebelraum1 = new Room("in einem Raum, in dessen Mitte ein verosteter Hebel steht", 16);
		hebelraum1.setHebel(new Hebel());
		hebelraum2 = new Room("in einem Raum, in dessen Mitte ein verosteter Hebel steht", 17);
		hebelraum2.setHebel(new Hebel());
		hebelraum3 = new Room("in einem Raum, in dessen Mitte ein verosteter Hebel steht", 18);
		hebelraum3.setHebel(new Hebel());

		halle = new Room(
				"in einem hallenartigen Raum, die Tür, durch die du kamst ist zugefallen. Du hörst ein mulmig machenendes Geräusch....",
				14);

		endgegner = new Room(
				"Dir fehlen die Worte um den Raum zu beschreiben, selbst wenn du es hinausschaffst wirst du dich wohl nie daran erinnern",
				15);

		// Ausgänge aufbauen:
		startraum.setExit("norden", gegnerraum1);

		gegnerraum1.setExit("norden", schatzraum3);
		gegnerraum1.setExit("westen", schatzraum1);
		gegnerraum1.setExit("osten", schatzraum2);
		gegnerraum1.setExit("nordwesten", hebelraum1);
		gegnerraum1.setExit("nordosten", gegnerraum3);
		gegnerraum1.setExit("süden", startraum);

		schatzraum1.setExit("norden", gegnerraum2);
		schatzraum1.setExit("nordosten", hebelraum1);
		schatzraum1.setExit("osten", gegnerraum1);

		schatzraum2.setExit("norden", gegnerraum3);
		schatzraum2.setExit("nordwesten", schatzraum3);
		schatzraum2.setExit("westen", gegnerraum1);

		hebelraum1.setExit("nordwesten", gegnerraum2);
		hebelraum1.setExit("nordosten", schatzraum3);
		hebelraum1.setExit("südosten", gegnerraum1);
		hebelraum1.setExit("südewesten", schatzraum1);

		gegnerraum2.setExit("norden", schatzraum4);
		gegnerraum2.setExit("nordosten", gegnerraum4);
		gegnerraum2.setExit("osten", schatzraum3);
		gegnerraum2.setExit("südosten", hebelraum1);
		gegnerraum2.setExit("süden", schatzraum1);

		schatzraum3.setExit("norden", gegnerraum4);
		schatzraum3.setExit("osten", gegnerraum3);
		schatzraum3.setExit("süden", gegnerraum1);
		schatzraum3.setExit("westen", gegnerraum2);
		schatzraum3.setExit("nordosten", hebelraum2);
		schatzraum3.setExit("südosten", schatzraum2);
		schatzraum3.setExit("südwesten", hebelraum1);
		schatzraum3.setExit("nordwesten", schatzraum4);

		gegnerraum3.setExit("norden", schatzraum5);
		gegnerraum3.setExit("süden", schatzraum2);
		gegnerraum3.setExit("westen", schatzraum3);
		gegnerraum3.setExit("nordwesten", hebelraum2);
		gegnerraum3.setExit("südwesten", gegnerraum1);

		schatzraum4.setExit("norden", gegnerraum5);
		schatzraum4.setExit("osten", gegnerraum4);
		schatzraum4.setExit("süden", gegnerraum2);
		schatzraum4.setExit("nordosten", hebelraum3);
		schatzraum4.setExit("südosten", schatzraum3);

		gegnerraum4.setExit("norden", schatzraum6);
		gegnerraum4.setExit("osten", schatzraum5);
		gegnerraum4.setExit("süden", schatzraum3);
		gegnerraum4.setExit("westen", schatzraum4);
		gegnerraum4.setExit("nordosten", gegnerraum6);
		gegnerraum4.setExit("südosten", hebelraum2);
		gegnerraum4.setExit("südwesten", gegnerraum2);
		gegnerraum4.setExit("nordwesten", hebelraum3);

		hebelraum2.setExit("nordosten", schatzraum5);
		hebelraum2.setExit("südosten", gegnerraum3);
		hebelraum2.setExit("südwesten", schatzraum3);
		hebelraum2.setExit("nordwesten", gegnerraum4);

		schatzraum5.setExit("norden", gegnerraum6);
		schatzraum5.setExit("süden", gegnerraum3);
		schatzraum5.setExit("westen", gegnerraum4);
		schatzraum5.setExit("nordwesten", schatzraum6);
		schatzraum5.setExit("südwesten", hebelraum2);

		gegnerraum5.setExit("osten", schatzraum6);
		gegnerraum5.setExit("süden", schatzraum4);
		gegnerraum5.setExit("südosten", hebelraum3);

		hebelraum3.setExit("nordosten", schatzraum6);
		hebelraum3.setExit("südosten", gegnerraum4);
		hebelraum3.setExit("südwesten", schatzraum4);
		hebelraum3.setExit("nordwesten", gegnerraum5);

		schatzraum6.setExit("norden", halle);
		schatzraum6.setExit("osten", gegnerraum6);
		schatzraum6.setExit("westen", gegnerraum5);
		schatzraum6.setExit("süden", gegnerraum4);
		schatzraum6.setExit("südosten", schatzraum5);
		schatzraum6.setExit("südwesten", hebelraum3);

		gegnerraum6.setExit("westen", schatzraum6);
		gegnerraum6.setExit("süden", schatzraum5);
		gegnerraum6.setExit("südwesten", gegnerraum4);

		halle.setExit("norden", endgegner);
		halle.setExit("süden", schatzraum6);

		Chest chest1 = new Chest();
		Chest chest2 = new Chest();
		Chest chest3 = new Chest();
		Chest chest4 = new Chest();
		Chest chest5 = new Chest();
		Chest chest6 = new Chest();

		schatzraum1.setChest(chest1);
		schatzraum2.setChest(chest2);
		schatzraum3.setChest(chest3);
		schatzraum4.setChest(chest4);
		schatzraum5.setChest(chest5);
		schatzraum6.setChest(chest6);

		switch (this.schwierigkeitsgrad) {

		case "Leicht", "":

			Opponent gegner1Leicht = new Opponent("Startgegner", 1, 200, 20, 10, 5);
			gegnerraum1.setGegner(gegner1Leicht);

			Opponent gegner2Leicht = new Opponent("Gegner 2", 1, 250, 25, 10, 5);
			gegnerraum2.setGegner(gegner2Leicht);

			Opponent gegner3Leicht = new Opponent("Gegner 3", 2, 300, 30, 10, 5);
			gegnerraum3.setGegner(gegner3Leicht);

			Opponent gegner4Leicht = new Opponent("Gegner 4", 2, 350, 35, 10, 5);
			gegnerraum4.setGegner(gegner4Leicht);

			Opponent gegner5Leicht = new Opponent("Gegner 5", 3, 400, 40, 10, 5);
			gegnerraum5.setGegner(gegner5Leicht);

			Opponent gegner6Leicht = new Opponent("Gegner 6", 4, 450, 45, 10, 5);
			gegnerraum6.setGegner(gegner6Leicht);

			endgegner.setGegner(new Opponent("Endgegner", 4, 600, 50, 10, 10));

			break;
		case "Normal":

			Opponent gegner1Normal = new Opponent("Startgegner", 1, 300, 25, 20, 10);
			gegnerraum1.setGegner(gegner1Normal);

			Opponent gegner2Normal = new Opponent("Gegner 2", 1, 350, 25, 25, 10);
			gegnerraum2.setGegner(gegner2Normal);

			Opponent gegner3Normal = new Opponent("Gegner 3", 2, 400, 30, 25, 10);
			gegnerraum3.setGegner(gegner3Normal);

			Opponent gegner4Normal = new Opponent("Gegner 4", 2, 450, 35, 25, 10);
			gegnerraum4.setGegner(gegner4Normal);

			Opponent gegner5Normal = new Opponent("Gegner 5", 3, 500, 40, 25, 10);
			gegnerraum5.setGegner(gegner5Normal);

			Opponent gegner6Normal = new Opponent("Gegner 6", 4, 550, 45, 25, 10);
			gegnerraum6.setGegner(gegner6Normal);

			endgegner.setGegner(new Opponent("Endgegner", 4, 800, 50, 25, 10));

			break;
		case "Schwer":

			Opponent gegner1Schwer = new Opponent("Startgegner", 1, 425, 25, 35, 10);
			gegnerraum1.setGegner(gegner1Schwer);

			Opponent gegner2Schwer = new Opponent("Gegner 2", 1, 475, 25, 35, 10);
			gegnerraum2.setGegner(gegner2Schwer);

			Opponent gegner3Schwer = new Opponent("Gegner 3", 2, 525, 30, 35, 10);
			gegnerraum3.setGegner(gegner3Schwer);

			Opponent gegner4Schwer = new Opponent("Gegner 4", 2, 575, 35, 35, 10);
			gegnerraum4.setGegner(gegner4Schwer);

			Opponent gegner5Schwer = new Opponent("Gegner 5", 3, 625, 40, 35, 10);
			gegnerraum5.setGegner(gegner5Schwer);

			Opponent gegner6Schwer = new Opponent("Gegner 6", 4, 675, 45, 35, 10);
			gegnerraum6.setGegner(gegner6Schwer);

			endgegner.setGegner(new Opponent("Endgegner", 4, 1400, 50, 35, 10));

			break;
		case "Extrem":

			Opponent gegner1Extrem = new Opponent("Startgegner", 1, 525, 25, 50, 10);
			gegnerraum1.setGegner(gegner1Extrem);

			Opponent gegner2Extrem = new Opponent("Gegner 2", 1, 575, 25, 50, 10);
			gegnerraum2.setGegner(gegner2Extrem);

			Opponent gegner3Extrem = new Opponent("Gegner 3", 2, 625, 30, 50, 10);
			gegnerraum3.setGegner(gegner3Extrem);

			Opponent gegner4Extrem = new Opponent("Gegner 4", 2, 675, 35, 50, 10);
			gegnerraum4.setGegner(gegner4Extrem);

			Opponent gegner5Extrem = new Opponent("Gegner 5", 3, 725, 40, 50, 10);
			gegnerraum5.setGegner(gegner5Extrem);

			Opponent gegner6Extrem = new Opponent("Gegner 6", 4, 775, 45, 50, 10);
			gegnerraum6.setGegner(gegner6Extrem);

			endgegner.setGegner(new Opponent("Endgegner", 4, 2000, 50, 50, 10));

			break;
		default:
			unbekanntenFehlerAnzeigen(schwierigkeitsgrad);
			break;
		}

		System.out.println("Player,Räume,Gegner angelegt!");

    }

	public void setRootLayout(AnchorPane rootLayout) {
		this.rootLayout = rootLayout;
	}

	public boolean hallePruefen(Room halle) {

		if (this.halle.equals(halle)) {
			return true;
		}
		return false;

	}

	public boolean endgegnerPruefen(Room room) {

		if (this.endgegner.equals(room)) {
			return true;
		}
		return false;

	}

	public Player getPlayer() {
		return player;
	}

	public static void fehlerBeimLadenVonFxmlDateiAnzeigen(String message) {
		Alert alert = new Alert(AlertType.ERROR);
		alert.setTitle("Ein Fehler ist aufgetreten!");
		alert.setHeaderText("Fehler beim Laden der fxml-Datei!");
		alert.setContentText(message);

		alert.showAndWait();
	}

	public static void unbekanntenFehlerAnzeigen(String message) {
		Alert alert = new Alert(AlertType.ERROR);
		alert.setTitle("Ein Fehler ist aufgetreten!");
		alert.setHeaderText("Unbekannter Fehler!");
		alert.setContentText(message);

		alert.showAndWait();
	}

	public static void main(String[] args) {
		launch(args);
	}

	public Stage getPrimaryStage() {
		return primaryStage;
	}

	public AnchorPane getRootLayout() {
		return rootLayout;
	}

	public Scene getScene() {
		return scene;
	}

	public void setSchwierigkeitsgrad(String schwierigkeitsgrad) {
		this.schwierigkeitsgrad = schwierigkeitsgrad;
	}

	public String getSchwierigkeitsgrad() {
		return schwierigkeitsgrad;
	}

	private void roomBilderAnlegen() {

		roomImages.put(1, new Image("roomImages/startraum.jpg"));

		roomImages.put(2, new Image("roomImages/Gegnerraum.jpg"));
		roomImages.put(6, new Image("roomImages/Gegnerraum.jpg"));
		roomImages.put(7, new Image("roomImages/Gegnerraum.jpg"));
		roomImages.put(8, new Image("roomImages/Gegnerraum.jpg"));
		roomImages.put(12, new Image("roomImages/Gegnerraum.jpg"));
		roomImages.put(13, new Image("roomImages/Gegnerraum.jpg"));

		roomImages.put(3, new Image("roomImages/Schatzraum.png"));
		roomImages.put(4, new Image("roomImages/Schatzraum.png"));
		roomImages.put(5, new Image("roomImages/Schatzraum.png"));
		roomImages.put(9, new Image("roomImages/Schatzraum.png"));
		roomImages.put(10, new Image("roomImages/Schatzraum.png"));
		roomImages.put(11, new Image("roomImages/Schatzraum.png"));

		roomImages.put(16, new Image("roomImages/Schalterraum.jpg"));
		roomImages.put(17, new Image("roomImages/Schalterraum.jpg"));
		roomImages.put(18, new Image("roomImages/Schalterraum.jpg"));

		roomImages.put(14, new Image("roomImages/Schalterraum.jpg"));

		roomImages.put(15, new Image("roomImages/Bossroom.jpg"));

		System.out.println("Raumbilder erfolgreich angelegt!");

	}

	private void gegnerGifsAnlegen() {

		gegnerGifs.put(2, new Image("gifs/gegner1.gif"));
		gegnerGifs.put(6, new Image("gifs/gegner2.gif"));
		gegnerGifs.put(7, new Image("gifs/gegner1.gif"));
		gegnerGifs.put(8, new Image("gifs/gegner3.gif"));
		gegnerGifs.put(12, new Image("gifs/gegner4.gif"));
		gegnerGifs.put(13, new Image("gifs/gegner3.gif"));

		gegnerGifs.put(15, new Image("gifs/gegner5.gif"));

		System.out.println("Gegnergifs erfolgreich angelegt!");

	}

	private void mapBilderAnlegen() {

		mapImages.put(1, new Image("mapImages/1.oose.png"));
		mapImages.put(2, new Image("mapImages/2.oose.png"));
		mapImages.put(3, new Image("mapImages/3.oose.png"));
		mapImages.put(4, new Image("mapImages/4.oose.png"));
		mapImages.put(5, new Image("mapImages/5.oose.png"));
		mapImages.put(6, new Image("mapImages/6.oose.png"));
		mapImages.put(7, new Image("mapImages/7.oose.png"));
		mapImages.put(8, new Image("mapImages/8.oose.png"));
		mapImages.put(9, new Image("mapImages/9.oose.png"));
		mapImages.put(10, new Image("mapImages/10.oose.png"));
		mapImages.put(11, new Image("mapImages/11.oose.png"));
		mapImages.put(12, new Image("mapImages/12.oose.png"));
		mapImages.put(13, new Image("mapImages/13.oose.png"));
		mapImages.put(14, new Image("mapImages/14.oose.png"));
		mapImages.put(15, new Image("mapImages/15.oose.png"));
		mapImages.put(16, new Image("mapImages/16.oose.png"));
		mapImages.put(17, new Image("mapImages/17.oose.png"));
		mapImages.put(18, new Image("mapImages/18.oose.png"));

		System.out.println("Mapbilder erfolgreich angelegt!");

	}

	private void itemLogosAnlegen() {

		logos.put("eisenschwert", new Image("item_logos/eisenschwert.png"));
		logos.put("heiltrank", new Image("item_logos/heiltrank.png"));
		logos.put("sporteierkuchen", new Image("item_logos/sporteierkuchen.png"));
		logos.put("verband", new Image("item_logos/bandages.png"));
		logos.put("medkit", new Image("item_logos/medkit.png"));
		logos.put("minischildtrank", new Image("item_logos/minischild.png"));
		logos.put("schildtrank", new Image("item_logos/bigschild.png"));
		logos.put("schlürfsaft", new Image("item_logos/slurp.png"));
		logos.put("saufkrug", new Image("item_logos/chug.png"));
		logos.put("stock", new Image("item_logos/stock.png"));
		logos.put("holzschwert", new Image("item_logos/holzschwert.png"));
		logos.put("diamantschwert", new Image("item_logos/diamantschwert.png"));
		logos.put("zauberschwert", new Image("item_logos/zauberschwert.png"));
		logos.put("schneeball", new Image("item_logos/schneeball.png"));

		System.out.println("Itemlogos erfolgreich angelegt!");

	}

	public HashMap<Integer, Image> getRoomImages() {
		return roomImages;
	}

	public HashMap<Integer, Image> getGegnerGifs() {
		return gegnerGifs;
	}

	public HashMap<Integer, Image> getMapImages() {
		return mapImages;
	}

	public HashMap<String, Image> getLogos() {
		return logos;
	}

}

